// Cercare tutte le persone tra i 25 e 50 anni con il nome che inizia per A o M per lo scopo di conoscere il cliente (know your customer).
FOR p IN Persona
  FILTER p.eta >= 25 AND p.eta <= 50
    AND (STARTS_WITH(p.nome, "A") OR STARTS_WITH(p.nome, "M"))
  RETURN p

// Cercare le persone che hanno più di 5 conti bancari associati, a banche diverse.
FOR p IN Persona
  LET banche = UNIQUE(
    FOR v, e, p1 IN 2..2 OUTBOUND p HA_CONTO, AFFILIATO
      FILTER IS_SAME_COLLECTION("Banca", v)
      RETURN v._id
  )
  FILTER LENGTH(banche) > 5
  RETURN p


// Cercare tutti i conti correnti di persone che hanno carta d’identità con numero uguale ma ente emittente diverso, di nazionalità Fiji (possibile paradiso fiscale)
LET carteDuplicate = (
  FOR c IN CartaIdentita
    COLLECT numero = c.numero INTO carte = c
    FILTER LENGTH(carte) == 2 AND carte[0].ente_emittente != carte[1].ente_emittente
    RETURN carte
)
FOR carta IN FLATTEN(carteDuplicate)
  FOR v1, e1 IN INBOUND carta HA_CARTA
    FILTER IS_SAME_COLLECTION("Persona", v1)
    FOR v2, e2 IN OUTBOUND v1 APPARTIENE_A
      FILTER v2.nome == "Fiji"
      FOR conto IN OUTBOUND v1 HA_CONTO
        RETURN conto

// ATTENZIONE (restituisce 3 TRANSAZIONE in meno rispetto a neo4j forse mancano transazioni)
// Cercare le persone che sono state coinvolte in almeno 14 transazioni nell'arco di 1 mese per tutti i conti bancari associati a quella persona e mostrare la carta d’identità e la nazione.
LET unMeseFa = DATE_SUBTRACT(DATE_NOW(), 1, "month")

FOR persona IN Persona
  LET conti = (
    FOR ha_conto IN HA_CONTO
      FILTER ha_conto._from == persona._id
      FOR conto IN Conto
        FILTER conto._id == ha_conto._to
        RETURN conto._id
  )
  
  LET transazioniRecenti = (
    FOR contoId IN conti
      FOR transazione IN TRANSAZIONE
        FILTER transazione._from == contoId
          AND DATE_ISO8601(transazione.data) >= unMeseFa
        RETURN transazione
  )

  FILTER LENGTH(transazioniRecenti) > 13

  LET carta = (
    FOR ha_carta IN HA_CARTA
      FILTER ha_carta._from == persona._id
      FOR cartaIdentita IN CartaIdentita
        FILTER cartaIdentita._id == ha_carta._to
        RETURN cartaIdentita
  )[0]

  LET nazione = (
    FOR appartiene IN APPARTIENE_A
      FILTER appartiene._from == persona._id
      FOR n IN Nazione
        FILTER n._id == appartiene._to
        RETURN n
  )[0]

  RETURN {
    persona: {
      nome: persona.nome,
      cognome: persona.cognome,
      codice_fiscale: persona.codice_fiscale
    },
    transazioni_ultimo_mese: LENGTH(transazioniRecenti),
    carta_identita: carta,
    nazione: nazione
  }