[Importare nazioni]
LOAD CSV WITH HEADERS FROM 'file:///nazioni.csv' AS row
CREATE (:Nazione {nome: row.nome, tasso_inflazione: toFloat(row.tasso_inflazione), popolazione: toInteger(row.popolazione)});

[Importare banche]
LOAD CSV WITH HEADERS FROM 'file:///banche.csv' AS row
CREATE (:Banca {nome: row.nome, anno_fondazione: toInteger(row.anno_fondazione), tipo: row.tipo, filiali: toInteger(row.filiali), rating: row.rating, settore: row.settore});

[Importare Persone]
LOAD CSV WITH HEADERS FROM 'file:///persone.csv' AS row
CREATE (:Persona {id: row.id, nome: row.nome, cognome: row.cognome, eta: toInteger(row.eta), codice_fiscale: row.codice_fiscale});

[Importare Carte d'Identità]
LOAD CSV WITH HEADERS FROM 'file:///carte_identita.csv' AS row
MATCH (p:Persona {codice_fiscale: row.codice_fiscale})
CREATE (p)-[:HA_CARTA]->(:CartaIdentita {numero: row.numero, ente_emittente: row.ente_emittente, data_rilascio: row.data_rilascio, data_scadenza: row.data_scadenza});

[Importare Conti Correnti]
LOAD CSV WITH HEADERS FROM 'file:///conti_corrente.csv' AS row
CREATE (:Conto {numero_conto: row.numero_conto, saldo: toFloat(row.saldo), tipo_conto: row.tipo_conto, data_apertura: row.data_apertura, IBAN: row.IBAN, valuta: row.valuta, limite_prelievo: toFloat(row.limite_prelievo), codice_fiscale: row.codice_fiscale});

[Persone -> Nazioni] Se vuoi collegare le persone alla loro nazionalità (magari generata casualmente):
MATCH (p:Persona)
WITH p, rand() AS r
MATCH (n:Nazione)
WITH p, n, rand() AS r2
ORDER BY p, r2
WITH p, collect(n)[0] AS nazioneCasuale
CREATE (p)-[:APPARTIENE_A]->(nazioneCasuale);

[Banche -> Nazioni] Le banche devono appartenere a una nazione. Se il CSV delle banche non ha informazioni sulle nazioni, puoi assegnarle casualmente:
MATCH (b:Banca)
MATCH (n:Nazione)
WITH b, n
ORDER BY rand()
WITH b, collect(n)[0] AS nazioneScelta
CREATE (b)-[:SITUATA_IN]->(nazioneScelta);

[Persone -> Conti Correnti] Utilizzando il 'vincolo' del codice_fiscale:
LOAD CSV WITH HEADERS FROM 'file:///conti_corrente.csv' AS row
MATCH (p:Persona {codice_fiscale: row.codice_fiscale})
MATCH (c:Conto {IBAN: row.IBAN})
CREATE (p)-[:HA_CONTO]->(c);

[Conti Correnti -> Banche] Devi aggiungere un campo banca nel CSV dei conti (oppure assegnarle casualmente):
MATCH (c:Conto), (b:Banca)
WITH c, COLLECT(b)[toInteger(rand() * SIZE(COLLECT(b)))] AS banca  // Seleziona una banca casuale per ogni conto
CREATE (c)-[:AFFILIATO]->(banca);

[Creare relazioni Transazione tra Conti]:
MATCH (c1:Conto)
WITH c1
MATCH (c2:Conto)
WHERE c1 <> c2
WITH c1, COLLECT(c2) AS destinatari_possibili
LIMIT 45000
UNWIND range(1, toInteger(rand() * 16) + 5) AS i  // Genera tra 5 e 20 transazioni per conto
WITH c1, destinatari_possibili[toInteger(rand() * SIZE(destinatari_possibili))] AS destinatario
CREATE (c1)-[:TRANSAZIONE {importo: round(rand() * 5000, 2), data: date()}]->(destinatario);

ATTENZIONE
Creare relazioni Transazioni tra Conti nei dataset successivi aggiungiamo nuove transazioni solo a conti che non ne hanno per mantenere coerenza e fare in modo che
i nuovi conti non siano collegati solo fra di loro ma anche con i precedenti:
MATCH (c1:Conto)
WHERE NOT EXISTS { MATCH (c1)-[:TRANSAZIONE]->(:Conto) }  // Seleziona solo i conti senza transazioni
WITH c1
MATCH (c2:Conto)
WHERE c1 <> c2
WITH c1, COLLECT(c2) AS destinatari_possibili
LIMIT numero_conti  // Aggiornato per includere tutti i conti
UNWIND range(1, toInteger(rand() * 16) + 5) AS i  // Genera tra 5 e 20 transazioni per conto
WITH c1, destinatari_possibili[toInteger(rand() * SIZE(destinatari_possibili))] AS destinatario
CREATE (c1)-[:TRANSAZIONE {importo: round(rand() * 5000, 2), data: date()}]->(destinatario);
